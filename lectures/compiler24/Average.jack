// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/11/Average/Main.jack

// Inputs some numbers and computes their average
class Average {
   function void main() {
      var Array a;
      var int length;
      var int i, sum;

      let length = Keyboard.readInt("How many numbers? ");
      let a = Array.new(length); // constructs the array

      let i = 0;
      while (i < length) {
         let a[i] = Keyboard.readInt("Enter a number: ");
         let sum = sum + a[i];
         let i = i + 1;
      }

      do Output.printString("The average is ");
      do Output.printInt(sum / length);
      return;
   }
}



// VM code generated from the above Jack code:
/*

Local symbol table:

a: (Array, local, 0)
length: (int, local, 1)
i: (int, local, 2)
sum: (int, local, 3)

// compile string "How many..."
call Keyboard.readInt 1
pop local 1   // save return value into 'length'

// let a = Array.new(length)
push local 1
call Array.new 1
pop local 0   // put return value (memory address)
              // into a.

// Code for while loop etc.

//   let a[i] = Keyboard.readInt("Enter a number: ");

// compute address of a[i]
push local 0      // push address of array
push local 2      // push i
add               // compute address of a[i]
pop temp 0        // store address into TEMP 0
   // put it in temp 0, not THAT, in case THAT
   // gets overwritten by the code generated for
   // the expression on the RHS of the =  !!

// compile the string...
call Keyboard.readInt 1

// Recall address from temp 0, put into THAT
push temp 0
pop pointer 1
// store return value to a[i] (= THAT)
pop that 0



//   let sum = sum + a[i];

push local 3  // push sum

// push a[i]
push local 0  // push a, i.e. base array memory address
push local 2  // push i (compileExpression())
add           // compute address of a[i]
pop pointer 1  // store address in THAT
push that 0   // read from the memory address
              // and push onto stack

add           // add them
pop local 3   // put result into sum

*/


/*  Recall the special registers our VM uses:

0  SP
1  LCL
2  ARG
3  THIS            <-- pointer
4  THAT (ARRAY)
5  TEMP
6  ...
7  ...

We can control the location of the THIS and THAT
segments by writing to 'pointer 0' and 'pointer 1'
respectively.


*/